name: "Shai-Hulud Scanner"
description: "Scan lockfiles for compromised packages using shai-hulud-scanner"
author: "jpmckearin"

inputs:
  list-path:
    description: "Path to exploited packages list file (relative to repository root). If not provided, uses the default list from the scanner repository."
    required: false
    default: ""
  root-dir:
    description: "Root directory to scan (relative to repository root)"
    required: false
    default: "."
  managers:
    description: "Package managers to scan (comma-separated: yarn,npm,pnpm,bun)"
    required: false
    default: "yarn,npm,pnpm,bun"
  include:
    description: "Glob patterns to include (comma-separated)"
    required: false
  exclude:
    description: "Glob patterns to exclude (comma-separated)"
    required: false
  fail-on-match:
    description: "Fail the action if compromised packages are found"
    required: false
    default: "true"
  only-affected:
    description: "Show only affected packages in output"
    required: false
    default: "false"
  summary:
    description: "Show only summary output"
    required: false
    default: "false"
  quiet:
    description: "Suppress non-essential output"
    required: false
    default: "false"
  no-color:
    description: "Disable colored output"
    required: false
    default: "false"

outputs:
  has-matches:
    description: "Whether any compromised packages were found"
    value: ${{ steps.scan.outputs.has-matches }}
  match-count:
    description: "Number of compromised packages found"
    value: ${{ steps.scan.outputs.match-count }}
  warning-count:
    description: "Number of packages with vulnerable versions available"
    value: ${{ steps.scan.outputs.warning-count }}
  json-output:
    description: "JSON output of scan results"
    value: ${{ steps.scan.outputs.json-output }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download shai-hulud-scanner and exploited packages list
      shell: pwsh
      run: |
        $scannerUrl = 'https://raw.githubusercontent.com/jpmckearin/shai-hulud-scanner/main/scan-shai-hulud.ps1'
        $scannerPath = 'scan-shai-hulud.ps1'
        $defaultListUrl = 'https://raw.githubusercontent.com/jpmckearin/shai-hulud-scanner/main/exploited_packages.txt'
        $defaultListPath = 'exploited_packages.txt'

        Write-Host "Downloading shai-hulud-scanner..."
        Invoke-WebRequest -Uri $scannerUrl -OutFile $scannerPath -UseBasicParsing | Out-Null

        # Verify the script was downloaded
        if (-not (Test-Path $scannerPath)) {
          Write-Error "Failed to download shai-hulud-scanner"
          exit 1
        }

        Write-Host "Downloading exploited packages list..."
        Invoke-WebRequest -Uri $defaultListUrl -OutFile $defaultListPath -UseBasicParsing | Out-Null

        # Verify the list was downloaded
        if (-not (Test-Path $defaultListPath)) {
          Write-Error "Failed to download exploited packages list"
          exit 1
        }

    - name: Validate inputs
      shell: pwsh
      run: |
        $listPath = '${{ inputs.list-path }}'
        $rootDir = '${{ inputs.root-dir }}'

        # Use default list if no custom list provided
        if ([string]::IsNullOrEmpty($listPath)) {
          $listPath = 'exploited_packages.txt'
        }

        # Check if list file exists
        if (-not (Test-Path $listPath)) {
          Write-Error "List file not found: $listPath"
          Write-Host "Please ensure the exploited packages list file exists in your repository or use the default list"
          exit 1
        }

        # Check if root directory exists
        if (-not (Test-Path $rootDir)) {
          Write-Error "Root directory not found: $rootDir"
          exit 1
        }

        # Input validation passed

    - name: Run shai-hulud-scanner
      id: scan
      shell: pwsh
      run: |
        $listPath = '${{ inputs.list-path }}'
        $rootDir = '${{ inputs.root-dir }}'
        $managers = '${{ inputs.managers }}'
        $include = '${{ inputs.include }}'
        $exclude = '${{ inputs.exclude }}'
        $onlyAffected = '${{ inputs.only-affected }}' -eq 'true'
        $summary = '${{ inputs.summary }}' -eq 'true'
        $quiet = '${{ inputs.quiet }}' -eq 'true'
        $noColor = '${{ inputs.no-color }}' -eq 'true'
        $failOnMatch = '${{ inputs.fail-on-match }}' -eq 'true'

        # Use default list if no custom list provided
        if ([string]::IsNullOrEmpty($listPath)) {
          $listPath = 'exploited_packages.txt'
        }

        # Build command arguments using splatting - the correct approach
        $scriptArgs = @{
          ListPath = $listPath
          RootDir = $rootDir
          Json = $true
        }

        # Only set Managers if different from default
        if ($managers -and $managers.Trim() -and $managers -ne "yarn,npm,pnpm,bun") {
          $scriptArgs.Managers = $managers -split ',' | ForEach-Object { $_.Trim() }
        }

        if ($include -and $include.Trim()) {
          $scriptArgs.Include = $include -split ',' | ForEach-Object { $_.Trim() }
        }

        if ($exclude -and $exclude.Trim()) {
          $scriptArgs.Exclude = $exclude -split ',' | ForEach-Object { $_.Trim() }
        }

        if ($onlyAffected) { $scriptArgs.OnlyAffected = $true }
        if ($summary) { $scriptArgs.Summary = $true }
        if ($quiet) { $scriptArgs.Quiet = $true }
        if ($noColor) { $scriptArgs.NoColor = $true }

        Write-Host "Running shai-hulud-scanner..."

        try {
          # Capture both stdout and stderr
          $output = & pwsh -File 'scan-shai-hulud.ps1' @scriptArgs 2>&1
          $exitCode = $LASTEXITCODE

          # Since we always use -Json, look for JSON in the output
          # JSON should be the last multi-line block that starts with {
          $jsonLines = @()
          $inJson = $false
          foreach ($line in $output) {
            if ($line -match '^\s*\{') {
              $inJson = $true
              $jsonLines = @($line)
            } elseif ($inJson) {
              $jsonLines += $line
            }
          }
          $jsonOutput = if ($jsonLines.Count -gt 0) { $jsonLines | Out-String } else { $null }

          if ($jsonOutput) {
            try {
              $json = $jsonOutput | ConvertFrom-Json
              $hasMatches = $json.anyAffected -eq $true
              $matchCount = if ($json.results) { ($json.results | Measure-Object).Count } else { 0 }
              $warningCount = if ($json.warnings) { ($json.warnings | Measure-Object).Count } else { 0 }

              if ($matchCount -gt 0) {
                Write-Host "⚠️ Found $matchCount compromised packages"
                
                # Add error annotations for each compromised package
                if ($json.results) {
                  foreach ($result in $json.results) {
                    if ($result.affected -eq $true) {
                      $packageInfo = "$($result.package)@$($result.version)"
                      $file = if ($result.file) { $result.file } else { "unknown" }
                      $line = if ($result.line) { $result.line } else { "1" }
                      Write-Output "::error file=$file,line=$line,title=Compromised Package Found::Package $packageInfo is known to be compromised by Shai-Hulud malware"
                    }
                  }
                }
              } else {
                Write-Host "✅ No compromised packages found"
              }

              # Add warning annotations for packages with vulnerable versions available
              if ($warningCount -gt 0) {
                Write-Host "⚠️ Found $warningCount packages with vulnerable versions available"
                if ($json.warnings) {
                  foreach ($warning in $json.warnings) {
                    $packageInfo = "$($warning.package)@$($warning.version)"
                    $file = if ($warning.file) { $warning.file } else { "unknown" }
                    $line = if ($warning.line) { $warning.line } else { "1" }
                    Write-Output "::warning file=$file,line=$line,title=Package with Vulnerable Version Available::Package $packageInfo has a safe version but vulnerable versions are available. Consider updating to the latest version."
                  }
                }
              }

              # Set outputs
              Write-Output "has-matches=$hasMatches" >> $env:GITHUB_OUTPUT
              Write-Output "match-count=$matchCount" >> $env:GITHUB_OUTPUT
              Write-Output "warning-count=$warningCount" >> $env:GITHUB_OUTPUT
              Write-Output "json-output=$jsonOutput" >> $env:GITHUB_OUTPUT

              # Fail if matches found and fail-on-match is true
              if ($hasMatches -and $failOnMatch) {
                Write-Error "❌ Security scan failed: $matchCount compromised packages detected!"
                Write-Error "Check the scan results above for details on affected packages."
                exit 2
              } else {
                Write-Host "✅ Security scan passed: No compromised packages detected"
                if ($warningCount -gt 0) {
                  Write-Host "⚠️  Note: $warningCount packages have vulnerable versions available (current versions are safe)"
                }
              }

            } catch {
              Write-Warning "Failed to parse JSON output: $($_.Exception.Message)"
              Write-Output "has-matches=false" >> $env:GITHUB_OUTPUT
              Write-Output "match-count=0" >> $env:GITHUB_OUTPUT
              Write-Output "warning-count=0" >> $env:GITHUB_OUTPUT
              Write-Output "json-output=" >> $env:GITHUB_OUTPUT
            }
          } else {
            Write-Warning "No JSON output received from scanner"
            Write-Host "Raw output:"
            $output | ForEach-Object { Write-Host "  $_" }
            Write-Output "has-matches=false" >> $env:GITHUB_OUTPUT
            Write-Output "match-count=0" >> $env:GITHUB_OUTPUT
            Write-Output "warning-count=0" >> $env:GITHUB_OUTPUT
            Write-Output "json-output=" >> $env:GITHUB_OUTPUT
          }

          # Display the output (only if not quiet)
          if (-not $quiet) {
            $output | ForEach-Object { Write-Host $_ }
          }

        } catch {
          Write-Error "Failed to run shai-hulud-scanner: $($_.Exception.Message)"
          Write-Output "has-matches=false" >> $env:GITHUB_OUTPUT
          Write-Output "match-count=0" >> $env:GITHUB_OUTPUT
          Write-Output "warning-count=0" >> $env:GITHUB_OUTPUT
          Write-Output "json-output=" >> $env:GITHUB_OUTPUT
          exit 1
        }
