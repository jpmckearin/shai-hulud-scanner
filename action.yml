name: "Shai-Hulud Scanner"
description: "Scan lockfiles for compromised packages using shai-hulud-scanner"
author: "jpmckearin"

inputs:
  list-path:
    description: "Path to custom exploited packages list file. If not specified, uses the built-in list of known compromised packages. Example: 'security/custom-packages.txt'"
    required: false
    default: ""
  root-dir:
    description: "Root directory to scan for lockfiles. Scans recursively for package-lock.json, yarn.lock, pnpm-lock.yaml, and bun.lock files. Example: './src' or '.'"
    required: false
    default: "."
  managers:
    description: "Package managers to scan (comma-separated). Valid options: yarn, npm, pnpm, bun. Example: 'yarn,npm' to scan only Yarn and npm lockfiles."
    required: false
    default: "yarn,npm,pnpm,bun"
  include:
    description: "Glob patterns to include (comma-separated). Only scan paths matching these patterns. Example: 'src/**,apps/**' to scan only src and apps directories."
    required: false
  exclude:
    description: "Glob patterns to exclude (comma-separated). Skip paths matching these patterns. Example: '**/test/**,**/dist/**' to skip test and dist directories."
    required: false
  fail-on-match:
    description: "Whether to fail the workflow when compromised packages are found. Set to 'false' to only warn without failing the build."
    required: false
    default: "true"
  only-affected:
    description: "Show only compromised packages in output, hiding safe packages. Useful for focusing on actionable items only."
    required: false
    default: "false"
  summary:
    description: "Show only summary output without detailed package information. Useful for getting a quick overview of scan results."
    required: false
    default: "false"
  quiet:
    description: "Suppress non-essential output including clean package listings. Only shows compromised packages and warnings."
    required: false
    default: "false"
  no-color:
    description: "Disable colored output. Useful when output will be processed by tools that don't handle ANSI color codes."
    required: false
    default: "false"

outputs:
  has-matches:
    description: "Whether any compromised packages were found"
    value: ${{ steps.scan.outputs.has-matches }}
  match-count:
    description: "Number of compromised packages found"
    value: ${{ steps.scan.outputs.match-count }}
  warning-count:
    description: "Number of packages with vulnerable versions available"
    value: ${{ steps.scan.outputs.warning-count }}
  json-output:
    description: "JSON output of scan results"
    value: ${{ steps.scan.outputs.json-output }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run shai-hulud-scanner
      id: scan
      shell: pwsh
      run: |
        $listPath = '${{ inputs.list-path }}'
        $rootDir = '${{ inputs.root-dir }}'
        $managers = '${{ inputs.managers }}'
        $include = '${{ inputs.include }}'
        $exclude = '${{ inputs.exclude }}'
        $onlyAffected = '${{ inputs.only-affected }}' -eq 'true'
        $summary = '${{ inputs.summary }}' -eq 'true'
        $quiet = '${{ inputs.quiet }}' -eq 'true'
        $noColor = '${{ inputs.no-color }}' -eq 'true'
        $failOnMatch = '${{ inputs.fail-on-match }}' -eq 'true'

        # Use default list if no custom list provided
        if ([string]::IsNullOrEmpty($listPath)) {
          $listPath = '${{ github.action_path }}/exploited_packages.txt'
        }

        # Build command arguments - PowerShell script validates all inputs now
        $args = @('-ListPath', $listPath, '-RootDir', $rootDir, '-Json')
        
        if ($managers) { $args += @('-Managers', ($managers -split ',' | ForEach-Object { $_.Trim() })) }
        if ($include) { $args += @('-Include', ($include -split ',' | ForEach-Object { $_.Trim() })) }
        if ($exclude) { $args += @('-Exclude', ($exclude -split ',' | ForEach-Object { $_.Trim() })) }
        if ($onlyAffected) { $args += '-OnlyAffected' }
        if ($summary) { $args += '-Summary' }  
        if ($quiet) { $args += '-Quiet' }
        if ($noColor) { $args += '-NoColor' }

        # Helper function to get packages by type
        function Get-PackagesByType($results, $isAffected) {
          $packages = @()
          foreach ($result in $results) {
            foreach ($package in $result.packages) {
              if ($isAffected -and $package.IsAffected) {
                $packages += [PSCustomObject]@{ Package = $package.Package; Version = $package.Version; File = $result.lockFile }
              } elseif (-not $isAffected -and $package.IsWarning) {
                $packages += [PSCustomObject]@{ Package = $package.Package; Version = $package.Version; File = $result.lockFile }
              }
            }
          }
          return $packages
        }

        Write-Host "Running shai-hulud-scanner..."

        try {
          # Run the scanner and get JSON output (local file)  
          $jsonOutput = & pwsh -File '${{ github.action_path }}/scan-shai-hulud.ps1' @args
          $exitCode = $LASTEXITCODE

          # Parse JSON with error handling
          try {
            $json = $jsonOutput | ConvertFrom-Json
            $hasMatches = $json.anyAffected
            $hasWarnings = $json.anyWarnings
            
            # Use summary counts for better performance
            $matchCount = if ($json.summary) { $json.summary.totalCompromised } else { 0 }
            $warningCount = if ($json.summary) { $json.summary.totalWarnings } else { 0 }
          } catch {
            Write-Error "Failed to parse JSON output: $($_.Exception.Message)"
            Write-Error "Raw output:"
            $jsonOutput | ForEach-Object { Write-Error "  $_" }
            exit 1
          }

          # Set outputs
          Write-Output "has-matches=$hasMatches" >> $env:GITHUB_OUTPUT
          Write-Output "match-count=$matchCount" >> $env:GITHUB_OUTPUT
          Write-Output "warning-count=$warningCount" >> $env:GITHUB_OUTPUT
          Write-Output "json-output=$jsonOutput" >> $env:GITHUB_OUTPUT

          # Create step summary
          $summary = "# 🛡️ Package Security Scan Results`n`n"
          
          if ($hasMatches) {
            $summary += "## ❌ Compromised Packages Found`n`n**$matchCount compromised packages detected**`n`n"
            $compromisedPackages = Get-PackagesByType $json.results $true
            if ($compromisedPackages) {
              $summary += "| Package | Version | File |`n|---------|---------|------|`n"
              foreach ($pkg in $compromisedPackages) {
                $summary += "| ``$($pkg.Package)`` | ``$($pkg.Version)`` | ``$($pkg.File)`` |`n"
              }
            }
          } elseif ($hasWarnings) {
            $summary += "## ⚠️ Warning: Vulnerable Versions Available`n`n**$warningCount packages have vulnerable versions available (current versions are safe)**`n`n"
            $warningPackages = Get-PackagesByType $json.results $false
            if ($warningPackages) {
              $summary += "| Package | Current Version | File |`n|---------|-----------------|------|`n"
              foreach ($pkg in $warningPackages) {
                $summary += "| ``$($pkg.Package)`` | ``$($pkg.Version)`` | ``$($pkg.File)`` |`n"
              }
            }
          } else {
            $summary += "## ✅ All Clear`n`nNo compromised packages found. All packages are using safe versions.`n`n"
          }

          $summary += "`n## 📊 Scan Summary`n`n- **Lockfiles scanned:** $($json.summary.totalLockfiles)`n- **Package entries checked:** $($json.summary.totalPackages)`n- **Compromised packages:** $matchCount`n- **Warning packages:** $warningCount`n`n"

          # Write to GitHub step summary
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append

          # Handle results based on JSON data
          if ($hasMatches) {
            $compromisedPackages = Get-PackagesByType $json.results $true
            if ($failOnMatch) {
              Write-Error "❌ Security scan failed: $matchCount compromised packages detected!"
              Write-Error "Affected packages:"
              foreach ($pkg in $compromisedPackages) {
                Write-Error "   - $($pkg.Package)@$($pkg.Version)"
              }
              exit 2
            } else {
              Write-Host "⚠️ Security scan completed with $matchCount compromised packages detected"
              Write-Host "Affected packages:"
              foreach ($pkg in $compromisedPackages) {
                Write-Host "   - $($pkg.Package)@$($pkg.Version)"
              }
            }
          } elseif ($hasWarnings) {
            Write-Host "✅ Security scan passed: No compromised packages detected"
            Write-Host "⚠️ Note: $warningCount packages have vulnerable versions available (current versions are safe):"
            $warningPackages = Get-PackagesByType $json.results $false
            foreach ($pkg in $warningPackages) {
              Write-Host "   - $($pkg.Package)@$($pkg.Version)"
            }
          } else {
            Write-Host "✅ Security scan passed: No compromised packages detected"
          }


        } catch {
          Write-Error "Failed to run shai-hulud-scanner: $($_.Exception.Message)"
          Write-Error "Command was: pwsh -File '${{ github.action_path }}/scan-shai-hulud.ps1' $($args -join ' ')"
          Write-Error "This could be due to:"
          Write-Error "  - PowerShell execution policy restrictions"
          Write-Error "  - Invalid input parameters"
          Write-Error "  - File system permissions"
          Write-Error "  - Missing or corrupted scanner script"
          Write-Output "has-matches=false" >> $env:GITHUB_OUTPUT
          Write-Output "match-count=0" >> $env:GITHUB_OUTPUT
          Write-Output "warning-count=0" >> $env:GITHUB_OUTPUT
          Write-Output "json-output=" >> $env:GITHUB_OUTPUT
          exit 1
        }
